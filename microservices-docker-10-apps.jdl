

/*
 * This is a microservice e-commerce store sample with Gateway and three microservice applications
 * This uses JHipster registry for service discovery and JWT authentication
 */
 
application {
  config {
    baseName store,
    applicationType gateway,
    packageName com.jhipster.demo.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    buildTool gradle,
    clientFramework react,
    useSass true,
    testFrameworks [protractor]
  }
  entities *
}

application {
  config {
    baseName product,
    applicationType microservice,
    packageName com.jhipster.demo.product,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    buildTool gradle,
    serverPort 8081,
    skipUserManagement true
  }
  entities Product, ProductCategory, ProductOrder, OrderItem
}

application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.jhipster.demo.invoice,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    buildTool gradle,
    serverPort 8082,
    skipUserManagement true
  }
  entities Invoice, Shipment
}

application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.jhipster.demo.notification,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    prodDatabaseType mongodb,
    devDatabaseType mongodb,
    cacheProvider no,
    enableHibernateCache false,
    buildTool gradle,
    serverPort 8083,
    skipUserManagement true
  }
  entities Notification
}

application {
  config {
    baseName reports,
    applicationType microservice,
    packageName com.jhipster.demo.report,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    buildTool gradle,
    serverPort 8084,
    skipUserManagement true
  }
  entities Report
}
application {
  config {
    baseName recommendation,
    applicationType microservice,
    packageName com.jhipster.demo.recommendation,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    buildTool gradle,
    serverPort 8085,
    skipUserManagement true
  }
  entities Recommendation

}

application {
  config {
    baseName retailStores,
    applicationType microservice,
    packageName com.jhipster.demo.retailstore,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType postgresql,
    buildTool gradle,
    serverPort 8086,
    skipUserManagement true
  }
  entities RetailStore, Worker, RetailStoreProduct

}

application {
  config {
    baseName promotions,
    applicationType microservice,
    packageName com.jhipster.demo.promotion,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType postgresql,
    buildTool gradle,
    serverPort 8087,
    skipUserManagement true
  }
  entities Promotion
}
application {
  config {
    baseName search,
    applicationType microservice,
    packageName com.jhipster.demo.search,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    buildTool gradle,
    serverPort 8088,
    skipUserManagement true
  }
  entities SearchHistory
}
application {
  config {
    baseName ads,
    applicationType microservice,
    packageName com.jhipster.demo.ads,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    buildTool gradle,
    serverPort 8089,
    skipUserManagement true
  }
    entities AdShown
}
/* Entities for Store Gateway */

entity Customer {
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE, OTHER
}

relationship OneToOne {
    Customer{user(login) required} to User
}

service Customer with serviceClass
paginate Customer with pagination

/** Product sold by the Online store */
entity Product {
    name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
    S, M, L, XL, XXL
}

entity ProductCategory {
    name String required
    description String
}

entity ProductOrder {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
    customer String required
}

enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

relationship ManyToOne {
	OrderItem{product(name) required} to Product
}

relationship OneToMany {
   ProductOrder{orderItem} to OrderItem{order(code) required} ,
   ProductCategory{product} to Product{productCategory(name)}
}

service Product, ProductCategory, ProductOrder, OrderItem with serviceClass
paginate Product, ProductOrder, OrderItem with pagination
microservice Product, ProductOrder, ProductCategory, OrderItem with product

/* Entities for Invoice microservice */
entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Invoice, Shipment with invoice

/* Entities for notification microservice */

entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification

entity Report {
    retrievedTime Instant required
    details String
    computingTime Instant required
}

service Report with serviceClass
microservice Report with report

entity Recommendation {
    date Instant required
    userId Long required
	productId Long required
}
service Recommendation with serviceClass
microservice Recommendation with recommendation

entity RetailStore {
	name String required
	city String required
}
entity Worker {
	firstName String required
	lastName String required
	position String required
}

entity RetailStoreProduct{
	productId Long required,
    productCount Long required,
}

relationship OneToMany {
    RetailStore{workers} to Worker{store}
}
relationship OneToMany {
    RetailStore{stock} to RetailStoreProduct{store}
}
service RetailStore with serviceClass
service Worker with serviceClass
service RetailStoreProduct with serviceClass

microservice RetailStore, Worker, RetailStoreProduct with retailStores

entity Promotion{
	code String required,
    startDate Instant required,
    endDate Instant required,
    discountPercentage BigDecimal required
}

service Promotion with serviceClass

microservice Promotion with promotions


entity AdShown{
	customerId Long required,
    date Instant required,
    adId Long required
}
microservice AdShown with ads

entity SearchHistory{
	customerId Long required,
    date Instant required,
    searchString String required
}
microservice SearchHistory with search


